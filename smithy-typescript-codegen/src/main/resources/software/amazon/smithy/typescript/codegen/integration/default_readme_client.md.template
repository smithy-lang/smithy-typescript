<!-- generated file, do not edit directly -->

# ${packageName}

## Description

SDK for JavaScript ${serviceId} Client for Node.js, Browser and React Native.

${documentation}

## Installing
To install the this package, simply type add or install ${packageName}
using your favorite package manager:
- `npm install ${packageName}`
- `yarn add ${packageName}`
- `pnpm add ${packageName}`

## Getting Started

### Import

To send a request, you only need to import the `${serviceId}Client` and
the commands you need, for example `${commandName}Command`:

```js
// CJS example
const { ${serviceId}Client, ${commandName}Command } = require("${packageName}");
```

```ts
// ES6+ example
import { ${serviceId}Client, ${commandName}Command } from "${packageName}";
```

### Usage

To send a request, you:

- Initiate client with configuration.
- Initiate command with input parameters.
- Call `send` operation on client with command object as input.
- If you are using a custom http handler, you may call `destroy()` to close open connections.

```js
// a client can be shared by different commands.
const client = new ${serviceId}Client();

const params = { /** input parameters */ };
const command = new ${commandName}Command(params);
```

#### Async/await

We recommend using [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)
operator to wait for the promise returned by send operation as follows:

```js
// async/await.
try {
  const data = await client.send(command);
  // process data.
} catch (error) {
  // error handling.
} finally {
  // finally.
}
```

Async-await is clean, concise, intuitive, easy to debug and has better error handling
as compared to using Promise chains or callbacks.

#### Promises

You can also use [Promise chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining)
to execute send operation.

```js
client.send(command).then(
  (data) => {
    // process data.
  },
  (error) => {
    // error handling.
  }
);
```

Promises can also be called using `.catch()` and `.finally()` as follows:

```js
client
  .send(command)
  .then((data) => {
    // process data.
  })
  .catch((error) => {
    // error handling.
  })
  .finally(() => {
    // finally.
  });
```

#### Callbacks

We do not recommend using callbacks because of [callback hell](http://callbackhell.com/),
but they are supported by the send operation.

```js
// callbacks.
client.send(command, (err, data) => {
  // process err and data.
});
```

### Troubleshooting

When the service returns an exception, the error will include the exception information,
as well as response metadata (e.g. request id).

```js
try {
  const data = await client.send(command);
  // process data.
} catch (error) {
  const { requestId, httpStatusCode } = error.$$metadata;
  console.log({ requestId, httpStatusCode });
  /**
   * The keys within exceptions are also parsed.
   * You can access them by specifying exception names:
   * if (error.name === 'SomeServiceException') {
   *     const value = error.specialKeyInException;
   * }
   */
}
```
